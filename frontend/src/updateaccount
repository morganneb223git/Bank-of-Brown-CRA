/* will update later

import React, { useState, useEffect } from 'react';
import { Card, Form, Button, Alert } from 'react-bootstrap';

function UpdateAccount() {
  const [show, setShow] = useState(true);
  const [status, setStatus] = useState('');
  const [variant, setVariant] = useState('success'); // For Alert styling

  // Assuming these states are for the form fields
  const [name, setName] = useState('');
  const [email, setEmail] = useState(''); // Email to identify the account to update
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState({}); // State to keep track of form errors

  useEffect(() => {
    // Placeholder for fetching logic
    // Assume fetchAccountDetails is an async function to fetch account details
    const fetchAccountDetails = async () => {
      try {
        const response = await fetch('/account/details', { /* Your fetch details here *//* });
        const accountDetails = await response.json();
        setEmail(accountDetails.email);
        setName(accountDetails.name);
        // setPassword(accountDetails.password); // It's uncommon to fetch passwords
      } catch (error) {
        console.error('Failed to fetch account details:', error);
      }
    };
  
    fetchAccountDetails();
  }, []);
  

  function handleUpdate() {
    if (!validateForm()) return; // Ensure validation before proceeding
    fetch('/account/update', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, email, password }) // Ensure backend matches account using email or another identifier
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      console.log(data);
      setShow(false);
      setStatus('Account successfully updated.');
      setVariant('success');
    })
    .catch(error => {
      console.error('Error:', error);
      setStatus('Failed to update account. Please try again.');
      setVariant('danger');
    });
  }

  return (
    <Card className="mt-3 mb-3">
      <Card.Body>
        <Card.Title>Update Account</Card.Title>
        {status && <Alert variant={variant}>{status}</Alert>}
        {show ? (
          <UpdateForm 
            name={name} setName={setName}
            email={email} setEmail={setEmail}
            password={password} setPassword={setPassword}
            errors={errors} setErrors={setErrors}
            handleUpdate={handleUpdate}
          />
        ) : (
          <UpdateMsg setShow={setShow} />
        )}
      </Card.Body>
    </Card>
  );
}

function UpdateMsg({ setShow }) {
  return (
    <>
      <h5>Success</h5>
      <Button variant="primary" onClick={() => setShow(true)}>Update another account</Button>
    </>
  );
}

function UpdateForm({ name, setName, email, setEmail, password, setPassword, errors, setErrors, handleUpdate }) {
  return (
    <Form>
      {/* Similar form setup as in CreateAccount, but with handleUpdate as the onClick handler *//*}
      {/* Name, Email, Password fields here *//*}
      <Button variant="primary" onClick={handleUpdate}>Update Account</Button>
    </Form>
  );
}

export default UpdateAccount;
*/